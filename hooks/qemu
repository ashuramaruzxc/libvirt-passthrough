#!/bin/bash

# Script is based on the following github repository with
# of cpu isolation for non systemd distros

#
# Author: Sebastiaan Meijer (sebastiaan@passthroughpo.st)
#
# Copy this file to /etc/libvirt/hooks, make sure it's called "qemu".
# After this file is installed, restart libvirt.
# From now on, you can easily add per-guest qemu hooks.
# Add your hooks in /etc/libvirt/hooks/qemu.d/vm_name/hook_name/state_name.
# For a list of available hooks, please refer to https://www.libvirt.org/hooks.html
#

GUEST_NAME="$1"
HOOK_NAME="$2"
STATE_NAME="$3"
MISC="${@:4}"

BASEDIR="$(dirname $0)"

HOOKPATH="$BASEDIR/qemu.d/$GUEST_NAME/$HOOK_NAME/$STATE_NAME"

set -e # If a script exits with an error, we should as well.

# check if it's a non-empty executable file
if [ -f "$HOOKPATH" ] && [ -s "$HOOKPATH"] && [ -x "$HOOKPATH" ]; then
    eval \"$HOOKPATH\" "$@"
elif [ -d "$HOOKPATH" ]; then
    while read file; do
        # check for null string
        if [ ! -z "$file" ]; then
          eval \"$file\" "$@"
        fi
    done <<< "$(find -L "$HOOKPATH" -maxdepth 1 -type f -executable -print;)"
fi

#!/bin/bash

# CPU set pseudo fs mount point
CPUSET=/sys/fs/cgroup/cpuset
# CPU set name for the host
SETNAME=host

# NUMA memory node for host usage
MEMNODES="0-1"

# List of all CPUs
HOSTCPUS=($(seq -s " " 0 $(expr $(cat /proc/cpuinfo | grep processor | wc -l) - 1)))

# List of currently available CPUs
cpus=()
if test -e ${CPUSET}/${SETNAME}/cpuset.cpus;
then
  for i in $(cat ${CPUSET}/${SETNAME}/cpuset.cpus | sed 's/,/\n/g')
  do
    if [[ $i = *-* ]]
    then
      cpus+=($(seq $(echo $i | sed 's/-/ /')))
    else
      cpus+=($i)
    fi
  done
else
  cpus=(${HOSTCPUS[@]})
fi
# If retrieval failed somehow, reset to default value
if [[ ${#cpus[@]} -eq 0 ]]
then
  cpus=(${HOSTCPUS[@]})
fi

# Sort CPU list
IFS=$'\n' cpus=($(sort <<<"${cpus[*]}")); unset IFS

case $2.$3 in
  # Runs before qemu is started
  "prepare.begin")
    exists=0

    # Check if CPU set exist
    if test -d ${CPUSET}/${SETNAME};
    then
      exists=1
    else
      # Creates CPU set if it doesn't exist
      mkdir ${CPUSET}/${SETNAME}
    fi

    # Removes requested CPUs from VM to host CPUs
    for cpu in $(cat "/etc/libvirt/qemu/$1.xml" | grep vcpupin | sed "s/^.*cpuset='//;s/'\\/>//")
    do
      for i in "${!cpus[@]}"; do
        if [[ ${cpus[i]} = $cpu ]]; then
          unset 'cpus[i]'
        fi
      done
    done

    IFS=$'\n' cpus=($(sort <<<"${cpus[*]}")); unset IFS # Sort available CPUs array

    # Set host's limits
    /bin/echo $(echo ${cpus[*]} | sed 's/ /,/g') > ${CPUSET}/${SETNAME}/cpuset.cpus
    /bin/echo ${MEMNODES} > ${CPUSET}/${SETNAME}/cpuset.mems

    if [[ $exists -eq 0 ]]
    then
      # Migrate tasks to this CPU set
      for i in `cat ${CPUSET}/tasks`;
      do
        /bin/echo ${i} > ${CPUSET}/${SETNAME}/tasks || echo
      done
    fi
    ;;
  # Runs after qemu stopped
  "release.end")
    # Adds requested CPUs from VM to host CPUs again
    for cpu in $(cat "/etc/libvirt/qemu/$1.xml" | grep vcpupin | sed "s/^.*cpuset='//;s/'\\/>//")
    do
      cpus+=($cpu)
    done

    IFS=$'\n' cpus=($(sort <<<"${cpus[*]}")); unset IFS # Sort available CPUs array
    uniqCpus=(); while IFS= read -r -d '' x; do uniqCpus+=("$x"); done < <(printf "%s\0" "${cpus[@]}" | sort -uz) # Uniq available CPUs array
    cpus=(${uniqCpus[@]})

    # If the newly available cores are all default host cores
    if [[ ${#cpus[@]} -ge ${#HOSTCPUS[@]} ]]
    then
      if test -d ${CPUSET}/${SETNAME};
      then
        # If CPU set exist - migrate tasks to a root CPU set and remove host CPU set
        sed -un p < ${CPUSET}/${SETNAME}/tasks > ${CPUSET}/tasks
        rmdir ${CPUSET}/${SETNAME}
      fi
      # If CPU set doesnâ€™t exist, it means the VM was started without locking the cores
    else
      # Adds the liberated cores to the host CPU set again; keep the remaining ones locked
      /bin/echo $(echo ${cpus[*]} | sed 's/ /,/g') > ${CPUSET}/${SETNAME}/cpuset.cpus
    fi
    ;;
esac
